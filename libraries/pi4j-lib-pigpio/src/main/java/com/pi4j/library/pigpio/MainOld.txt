//package com.pi4j.library.pigpio;
///*-
// * #%L
 * **********************************************************************
 * ORGANIZATION  :  Pi4J
 * PROJECT       :  Pi4J :: LIBRARY  :: PIGPIO Library
 * FILENAME      :  MainOld.java
 *
 * This file is part of the Pi4J project. More information about
 * this project can be found here:  https://pi4j.com/
 * **********************************************************************
 * %%
 * Copyright (C) 2012 - 2019 Pi4J
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
// */
//
//import com.pi4j.Pi4J;
//import com.pi4j.io.gpio.analog.AnalogChangeListener;
//import com.pi4j.io.gpio.analog.binding.AnalogBindingSync;
//
//public class MainOld {
//
//    public MainOld() {
//    }
//
//
////    public static byte[] sendCommand(Socket socket, int cmd, int address) throws IOException, InterruptedException {
////        return sendCommand(socket, cmd, address, 0);
////    }
////    public static byte[] sendCommand(Socket socket, int cmd, int address, int value) throws IOException, InterruptedException {
////
////        byte[] bytes = new byte[16];
////        ByteBuffer buffer = ByteBuffer.wrap(bytes);
////        buffer.order(ByteOrder.LITTLE_ENDIAN);
////        buffer.putInt(cmd); // CMD (READ==3, WRITE=4)
////        buffer.putInt(address); // <P1> GPIO 0
////        buffer.putInt(value); // <P2>
////        //buffer.putInt(0); // <P3>
////        //buffer.putInt(0); // <EXT_LEN>
////        //buffer.putInt(0); // <RES>
////
////        System.out.println("[TX] " + Arrays.toString(buffer.array()));
////        socket.getOutputStream().write(buffer.array());
////        socket.getOutputStream().flush();
////
////        Thread.sleep(5);
////
////        int avail = socket.getInputStream().available();
////        var rx = socket.getInputStream().readNBytes(avail);
////
////        System.out.println("BYTES RX : "+  avail);
////        System.out.println(" - [CMD] : " + rx[0] + "," + rx[1]);
////        System.out.println(" - [P1]  : " + rx[2] + "," + rx[3]);
////        System.out.println(" - [P2]  : " + rx[4] + "," + rx[5]);
////        System.out.println(" - [P3]  : " + rx[6] + "," + rx[7]);
////
////        return rx;
////    }
//
//    public static void main(String[] args) throws Exception {
//        System.setProperty(org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "TRACE");
//
//        // READ	3	gpio	0	0
//
////        typedef struct
////        {
////            uint32_t cmd;
////            uint32_t p1;
////            uint32_t p2;
////            union
////            {
////                uint32_t p3;
////                uint32_t ext_len;
////                uint32_t res;
////            };
////        } cmdCmd_t;
//
//        PiGpio pigpio = new PiGpio("rpi3bp");
//
//        System.out.println("Raspberry Pi - Hardware Revision  : " + pigpio.gpioHardwareRevisionString());
//        System.out.println("Raspberry Pi - PIGPIO Lib Version : " + pigpio.gpioVersion());
//
//        for(int p = 0 ; p <= 31; p++) {
//            System.out.println("  GPIO " + p + "; MODE=" + pigpio.gpioGetMode(p) + "; STATE=" + pigpio.gpioRead(p));
//        }
//
//
//        //pigpio.digitalState(5);
//
////        pigpio.digitalState(5, DigitalState.HIGH);
////        pigpio.digitalState(5);
////
////        pigpio.digitalState(5, DigitalState.LOW);
////        pigpio.digitalState(5);
//
//
////        Socket socket = new Socket("rpi3bp", 8888);
//
////        System.out.println("IS CONNECTED: "+  socket.isConnected());
//
////        sendCommand(socket, 4, 5, 0);
////        sendCommand(socket,3, 5);
//
//
////        byte[] bytes = new byte[16];
////        ByteBuffer buffer = ByteBuffer.wrap(bytes);
////        buffer.order(ByteOrder.LITTLE_ENDIAN);
////        buffer.putInt(4); // CMD (READ==3, WRITE=4)
////        buffer.putInt(5); // <P1> GPIO 0
////        buffer.putInt(0); // <P2>
////        //buffer.putInt(0); // <P3>
////        //buffer.putInt(0); // <EXT_LEN>
////        //buffer.putInt(0); // <RES>
////
////
////        System.out.println("[TX] " + Arrays.toString(buffer.array()));
////        socket.getOutputStream().write(buffer.array());
////        socket.getOutputStream().flush();
////
////        Thread.sleep(2);
////
////        int avail = socket.getInputStream().available();
////        System.out.println("BYTES AVAIL : "+  avail);
////
////
////        byte[] rx = socket.getInputStream().readNBytes(avail);
////
////        System.out.println(Arrays.toString(rx));
////
////        Thread.sleep(20);
//
////        public String sendMessage(String msg) {
////            out.println(msg);
////            String resp = in.readLine();
////            return resp;
////        }
//
//
//        //while(int b =in.read()
//
//
////
////        int inputLine;
////        while ((inputLine = in.read()) != -1) {
////            System.out.println(inputLine);
////        }
//
//        System.exit(0);
//
//
//        // Initialize Pi4J with an auto context
//        // An auto context includes AUTO-DETECT BINDINGS enabled
//        // which will load all detected Pi4J extension libraries
//        // (Platforms and Providers) in the class path
//        var pi4j = Pi4J.newAutoContext();
//
//
////        Serial serial = Serial.instance("/dev/ttyUSB1");
////        serial.open();
////        serial.send("TEST DATA");
////        serial.close();
//
//        var din1 = pi4j.din().create(11);
//        var ain1 = pi4j.ain().create(21);
//
//        var input = pi4j.ain().create(98);
//        var output1 = pi4j.aout().create(99);
//        var output2 = pi4j.aout().create(100);
//
//        input.addListener((AnalogChangeListener) event -> {
//            System.out.print(event);
//        });
//
//
//        output1.addListener((AnalogChangeListener) event -> {
//            System.out.println(event);
//        });
//        output2.addListener((AnalogChangeListener) event -> {
//            System.out.println(event);
//        });
//
//        input.bind(new AnalogBindingSync(output1, output2));
//
//
//        //((TestAnalogInput)input).test(21).test(22).test(23);
//
//
//        output1.value(12);
//        output1.setValue(78);
//        output1.value(0x01);
//
//
//        //AnalogOutput aout1 = AnalogOutput.in
////        DigitalOutput dout1 = DigitalOutput;
//
//        // shutdown Pi4J
//        pi4j.shutdown();
//    }
//}
